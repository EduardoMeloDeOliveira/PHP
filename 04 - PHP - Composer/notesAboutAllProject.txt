Imagine que você está construindo uma casa. Para isso, você precisa de vários materiais, como tijolos, cimento, madeira, etc. ️ Cada material é como uma dependência do seu projeto.

O Composer é como um gerente de compras que te ajuda a encontrar e organizar todos os materiais que você precisa para construir sua casa. Ele vai te ajudar a encontrar os melhores fornecedores (pacotes) e garantir que você tenha tudo o que precisa para começar a construir.

No caso do Composer, você vai usar o terminal para "pedir" os materiais (pacotes) que você precisa para o seu projeto PHP. Ele vai baixar os pacotes e organizá-los de forma que você possa usá-los facilmente.

Assim como você não precisa se preocupar em ir até a loja de materiais de construção para comprar cada tijolo, o Composer te ajuda a ter tudo o que você precisa para o seu projeto PHP sem precisar se preocupar com os detalhes de cada dependência.

Nessa aula, aprendemos como iniciar um projeto com o Composer. Vimos que ele é um gerenciador de dependências, como o Yum e o Apt, mas focado em projetos, e não no sistema operacional.

Para começar, criamos um arquivo composer.json no nosso projeto, que contém informações importantes como o nome, a descrição, o tipo do projeto e as dependências que ele precisa.

O Composer nos ajuda a organizar as dependências do nosso projeto, garantindo que todas as bibliotecas necessárias estejam disponíveis para o funcionamento do nosso código.

Que legal que você está se aventurando no mundo do Composer!

Nessa aula, aprendemos como encontrar os pacotes que precisamos para o nosso projeto. O Composer usa um site chamado Packagist para armazenar os pacotes públicos.

Para encontrar os pacotes que precisamos, podemos fazer uma busca no Packagist. Por exemplo, se precisarmos fazer uma requisição HTTP, podemos procurar por "http client" e encontrar o pacote "guzzlehttp/guzzle". Se precisarmos analisar o HTML, podemos procurar por "dom crawler" e encontrar o pacote "symfony/dom-crawler".

Cada pacote no Packagist tem uma página com informações sobre ele, como a documentação e como usá-lo.

Nessa aula, aprendemos sobre a importância de gerenciar dependências em projetos PHP, utilizando o Composer. Vimos como instalar pacotes como o Guzzle e o DomCrawler, que facilitam a realização de requisições HTTP e o parsing de HTML, respectivamente.

O Composer, além de instalar as dependências, também as organiza em uma pasta chamada "vendor", garantindo que todas as dependências necessárias estejam disponíveis para o seu projeto.

Também vimos como o Composer atualiza o arquivo composer.json, adicionando as dependências instaladas, e como o arquivo composer.lock registra as versões exatas de cada dependência instalada.

Com o Composer, você pode instalar, atualizar e gerenciar as dependências do seu projeto de forma eficiente e organizada.

Lembre-se que o Composer é uma ferramenta essencial para o desenvolvimento de projetos PHP, e entender como ele funciona é fundamental para garantir que seu projeto tenha todas as dependências necessárias para funcionar corretamente.


No vídeo anterior, ao digitar composer install a nova dependência (Symfony DomCrawler) não foi instalada. O pacote só foi buscado pelo composer ao executar composer update.

Isso se dá pelo seguinte fato: O comando composer install lê o arquivo composer.lock e instala as exatas dependências lá definidas. No nosso caso, nós já tinhamos o arquivo criado, então o composer.lock foi lido e como não havia alterações, nada foi instalado.

Já o comando composer update lê o arquivo composer.json, instala as dependências mais atuais dentro das restrições definidas e atualiza o composer.lock.

Sendo assim, em um projeto em andamento (tendo o arquivo composer.lock), para instalarmos uma nova dependência precisamos executar o composer require ou após adicionar a dependência no arquivo composer.json executar o comando composer update

Nessa aula, aprendemos como gerenciar dependências no PHP usando o Composer. Vimos como o arquivo composer.json define as dependências do nosso projeto e como o composer.lock armazena as versões exatas instaladas.

Também exploramos o uso do DomCrawler para analisar o HTML da página da Alura e extrair os nomes dos cursos. Para isso, usamos o método filter() para selecionar os elementos <span> com a classe card-curso__nome.

Por fim, aprendemos sobre o autoload do Composer, que permite que o PHP encontre as classes das dependências sem precisarmos especificar o caminho completo. Isso torna o código mais organizado e facilita a manutenção do projeto.

Essa aula foi sobre o padrão PSR-4, que define como o Composer deve mapear os namespaces das nossas classes para os arquivos do projeto.

O PSR-4 é um padrão que garante que as bibliotecas e componentes do Composer sejam reutilizáveis em diferentes frameworks. Ele define que cada classe deve ter um namespace principal, chamado de "vendor namespace", que geralmente é o nome do autor ou do projeto.

Para mapear os namespaces para os arquivos, o PSR-4 usa uma estrutura de pastas. Por exemplo, se o namespace principal for Alura\BuscadorDeCursos, todas as classes nesse namespace estarão dentro da pasta "src". Se tivermos um namespace Alura\BuscadorDeCursos\Helper, as classes nesse namespace estarão dentro da pasta "src/helper".

O nome do arquivo deve ser igual ao nome da classe, com a extensão .php.
